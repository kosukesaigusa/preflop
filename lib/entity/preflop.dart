import 'package:freezed_annotation/freezed_annotation.dart';

part 'preflop.freezed.dart';

/// プリフロップハンドレンジ表。
@freezed
abstract class PreflopHandRangeMatrix with _$PreflopHandRangeMatrix {
  const factory PreflopHandRangeMatrix({
    required String name,
    required List<PreflopRank> preflopRanks,
    required Map<PreflopHand, PreflopRank> rangeData,
  }) = _PreflopHandRange;

  /// 指定されたマップからプリフロップハンドレンジ表を生成する。
  factory PreflopHandRangeMatrix.fromMap(Map<String, dynamic> map) {
    final preflopRanks =
        (map['ranks'] as List<dynamic>)
            .map((e) => PreflopRank.fromJson(e as Map<String, dynamic>))
            .toList();
    final handRanksMap = map['handRanks'] as Map<String, dynamic>;
    return PreflopHandRangeMatrix(
      name: map['name'] as String? ?? 'ハンドレンジ',
      preflopRanks: preflopRanks,
      rangeData: handRanksMap.map(
        (key, value) =>
            MapEntry(PreflopHand.fromString(key), preflopRanks.where((e) => e.rank == value).first),
      ),
    );
  }

  const PreflopHandRangeMatrix._();

  /// 当該プリフロップハンドレンジ表における最大ランク。
  int get maxRank => preflopRanks.fold(0, (max, value) => max > value.rank ? max : value.rank);

  /// 当該プリフロップハンドレンジ表において、指定したプリフロップハンドのランク。
  PreflopRank getRank(PreflopHand hand) {
    final preflopRank = rangeData[hand];
    if (preflopRank == null) {
      throw ArgumentError('Invalid preflop hand: $hand');
    }
    return preflopRank;
  }
}

/// プリフロップハンドレンジ表における、あるハンドのランク。
@freezed
sealed class PreflopRank with _$PreflopRank {
  /// ランクが指定されたランク。
  const factory PreflopRank.ranked({
    required int rank,
    required String description,
    required String colorCode,
  }) = RankedPreflopRank;

  /// フォールドするべきランク。
  const factory PreflopRank.fold({required String description, required String colorCode}) =
      FoldPreflopRank;

  /// JSON からプリフロップランクを生成する。
  factory PreflopRank.fromJson(Map<String, dynamic> map) {
    final rank = map['rank'] as int;
    final description = map['description'] as String;
    final colorCode = map['colorCode'] as String;
    if (rank <= 0) {
      return PreflopRank.fold(description: description, colorCode: colorCode);
    }
    return PreflopRank.ranked(rank: rank, description: description, colorCode: colorCode);
  }

  const PreflopRank._();

  /// ランクの値を取得する。
  int get rank => switch (this) {
    RankedPreflopRank(:final rank) => rank,
    FoldPreflopRank() => 0,
  };
}

/// プリフロップのハンド一覧。
enum PreflopHand {
  // ポケットペア一覧 (13)。
  aces,
  kings,
  queens,
  jacks,
  tens,
  nines,
  eights,
  sevens,
  sixes,
  fives,
  fours,
  threes,
  twos,

  // スーテッドのハイカード一覧 (78)。
  aceKingS,
  aceQueenS,
  aceJackS,
  aceTenS,
  aceNineS,
  aceEightS,
  aceSevenS,
  aceSixS,
  aceFiveS,
  aceFourS,
  aceThreeS,
  aceTwoS,
  kingQueenS,
  kingJackS,
  kingTenS,
  kingNineS,
  kingEightS,
  kingSevenS,
  kingSixS,
  kingFiveS,
  kingFourS,
  kingThreeS,
  kingTwoS,
  queenJackS,
  queenTenS,
  queenNineS,
  queenEightS,
  queenSevenS,
  queenSixS,
  queenFiveS,
  queenFourS,
  queenThreeS,
  queenTwoS,
  jackTenS,
  jackNineS,
  jackEightS,
  jackSevenS,
  jackSixS,
  jackFiveS,
  jackFourS,
  jackThreeS,
  jackTwoS,
  tenNineS,
  tenEightS,
  tenSevenS,
  tenSixS,
  tenFiveS,
  tenFourS,
  tenThreeS,
  tenTwoS,
  nineEightS,
  nineSevenS,
  nineSixS,
  nineFiveS,
  nineFourS,
  nineThreeS,
  nineTwoS,
  eightSevenS,
  eightSixS,
  eightFiveS,
  eightFourS,
  eightThreeS,
  eightTwoS,
  sevenSixS,
  sevenFiveS,
  sevenFourS,
  sevenThreeS,
  sevenTwoS,
  sixFiveS,
  sixFourS,
  sixThreeS,
  sixTwoS,
  fiveFourS,
  fiveThreeS,
  fiveTwoS,
  fourThreeS,
  fourTwoS,
  threeTwoS,

  // オフスートのハイカード一覧 (78)。
  aceKingO,
  aceQueenO,
  aceJackO,
  aceTenO,
  aceNineO,
  aceEightO,
  aceSevenO,
  aceSixO,
  aceFiveO,
  aceFourO,
  aceThreeO,
  aceTwoO,
  kingQueenO,
  kingJackO,
  kingTenO,
  kingNineO,
  kingEightO,
  kingSevenO,
  kingSixO,
  kingFiveO,
  kingFourO,
  kingThreeO,
  kingTwoO,
  queenJackO,
  queenTenO,
  queenNineO,
  queenEightO,
  queenSevenO,
  queenSixO,
  queenFiveO,
  queenFourO,
  queenThreeO,
  queenTwoO,
  jackTenO,
  jackNineO,
  jackEightO,
  jackSevenO,
  jackSixO,
  jackFiveO,
  jackFourO,
  jackThreeO,
  jackTwoO,
  tenNineO,
  tenEightO,
  tenSevenO,
  tenSixO,
  tenFiveO,
  tenFourO,
  tenThreeO,
  tenTwoO,
  nineEightO,
  nineSevenO,
  nineSixO,
  nineFiveO,
  nineFourO,
  nineThreeO,
  nineTwoO,
  eightSevenO,
  eightSixO,
  eightFiveO,
  eightFourO,
  eightThreeO,
  eightTwoO,
  sevenSixO,
  sevenFiveO,
  sevenFourO,
  sevenThreeO,
  sevenTwoO,
  sixFiveO,
  sixFourO,
  sixThreeO,
  sixTwoO,
  fiveFourO,
  fiveThreeO,
  fiveTwoO,
  fourThreeO,
  fourTwoO,
  threeTwoO;

  factory PreflopHand.fromString(String value) => switch (value) {
    // ポケットペア一覧 (13)。
    'aces' => PreflopHand.aces,
    'kings' => PreflopHand.kings,
    'queens' => PreflopHand.queens,
    'jacks' => PreflopHand.jacks,
    'tens' => PreflopHand.tens,
    'nines' => PreflopHand.nines,
    'eights' => PreflopHand.eights,
    'sevens' => PreflopHand.sevens,
    'sixes' => PreflopHand.sixes,
    'fives' => PreflopHand.fives,
    'fours' => PreflopHand.fours,
    'threes' => PreflopHand.threes,
    'twos' => PreflopHand.twos,

    // スーテッドのハイカード一覧 (78)。
    'ace-king-s' => PreflopHand.aceKingS,
    'ace-queen-s' => PreflopHand.aceQueenS,
    'ace-jack-s' => PreflopHand.aceJackS,
    'ace-ten-s' => PreflopHand.aceTenS,
    'ace-nine-s' => PreflopHand.aceNineS,
    'ace-eight-s' => PreflopHand.aceEightS,
    'ace-seven-s' => PreflopHand.aceSevenS,
    'ace-six-s' => PreflopHand.aceSixS,
    'ace-five-s' => PreflopHand.aceFiveS,
    'ace-four-s' => PreflopHand.aceFourS,
    'ace-three-s' => PreflopHand.aceThreeS,
    'ace-two-s' => PreflopHand.aceTwoS,
    'king-queen-s' => PreflopHand.kingQueenS,
    'king-jack-s' => PreflopHand.kingJackS,
    'king-ten-s' => PreflopHand.kingTenS,
    'king-nine-s' => PreflopHand.kingNineS,
    'king-eight-s' => PreflopHand.kingEightS,
    'king-seven-s' => PreflopHand.kingSevenS,
    'king-six-s' => PreflopHand.kingSixS,
    'king-five-s' => PreflopHand.kingFiveS,
    'king-four-s' => PreflopHand.kingFourS,
    'king-three-s' => PreflopHand.kingThreeS,
    'king-two-s' => PreflopHand.kingTwoS,
    'queen-jack-s' => PreflopHand.queenJackS,
    'queen-ten-s' => PreflopHand.queenTenS,
    'queen-nine-s' => PreflopHand.queenNineS,
    'queen-eight-s' => PreflopHand.queenEightS,
    'queen-seven-s' => PreflopHand.queenSevenS,
    'queen-six-s' => PreflopHand.queenSixS,
    'queen-five-s' => PreflopHand.queenFiveS,
    'queen-four-s' => PreflopHand.queenFourS,
    'queen-three-s' => PreflopHand.queenThreeS,
    'queen-two-s' => PreflopHand.queenTwoS,
    'jack-ten-s' => PreflopHand.jackTenS,
    'jack-nine-s' => PreflopHand.jackNineS,
    'jack-eight-s' => PreflopHand.jackEightS,
    'jack-seven-s' => PreflopHand.jackSevenS,
    'jack-six-s' => PreflopHand.jackSixS,
    'jack-five-s' => PreflopHand.jackFiveS,
    'jack-four-s' => PreflopHand.jackFourS,
    'jack-three-s' => PreflopHand.jackThreeS,
    'jack-two-s' => PreflopHand.jackTwoS,
    'ten-nine-s' => PreflopHand.tenNineS,
    'ten-eight-s' => PreflopHand.tenEightS,
    'ten-seven-s' => PreflopHand.tenSevenS,
    'ten-six-s' => PreflopHand.tenSixS,
    'ten-five-s' => PreflopHand.tenFiveS,
    'ten-four-s' => PreflopHand.tenFourS,
    'ten-three-s' => PreflopHand.tenThreeS,
    'ten-two-s' => PreflopHand.tenTwoS,
    'nine-eight-s' => PreflopHand.nineEightS,
    'nine-seven-s' => PreflopHand.nineSevenS,
    'nine-six-s' => PreflopHand.nineSixS,
    'nine-five-s' => PreflopHand.nineFiveS,
    'nine-four-s' => PreflopHand.nineFourS,
    'nine-three-s' => PreflopHand.nineThreeS,
    'nine-two-s' => PreflopHand.nineTwoS,
    'eight-seven-s' => PreflopHand.eightSevenS,
    'eight-six-s' => PreflopHand.eightSixS,
    'eight-five-s' => PreflopHand.eightFiveS,
    'eight-four-s' => PreflopHand.eightFourS,
    'eight-three-s' => PreflopHand.eightThreeS,
    'eight-two-s' => PreflopHand.eightTwoS,
    'seven-six-s' => PreflopHand.sevenSixS,
    'seven-five-s' => PreflopHand.sevenFiveS,
    'seven-four-s' => PreflopHand.sevenFourS,
    'seven-three-s' => PreflopHand.sevenThreeS,
    'seven-two-s' => PreflopHand.sevenTwoS,
    'six-five-s' => PreflopHand.sixFiveS,
    'six-four-s' => PreflopHand.sixFourS,
    'six-three-s' => PreflopHand.sixThreeS,
    'six-two-s' => PreflopHand.sixTwoS,
    'five-four-s' => PreflopHand.fiveFourS,
    'five-three-s' => PreflopHand.fiveThreeS,
    'five-two-s' => PreflopHand.fiveTwoS,
    'four-three-s' => PreflopHand.fourThreeS,
    'four-two-s' => PreflopHand.fourTwoS,
    'three-two-s' => PreflopHand.threeTwoS,

    // オフスートのハイカード一覧 (78)。
    'ace-king-o' => PreflopHand.aceKingO,
    'ace-queen-o' => PreflopHand.aceQueenO,
    'ace-jack-o' => PreflopHand.aceJackO,
    'ace-ten-o' => PreflopHand.aceTenO,
    'ace-nine-o' => PreflopHand.aceNineO,
    'ace-eight-o' => PreflopHand.aceEightO,
    'ace-seven-o' => PreflopHand.aceSevenO,
    'ace-six-o' => PreflopHand.aceSixO,
    'ace-five-o' => PreflopHand.aceFiveO,
    'ace-four-o' => PreflopHand.aceFourO,
    'ace-three-o' => PreflopHand.aceThreeO,
    'ace-two-o' => PreflopHand.aceTwoO,
    'king-queen-o' => PreflopHand.kingQueenO,
    'king-jack-o' => PreflopHand.kingJackO,
    'king-ten-o' => PreflopHand.kingTenO,
    'king-nine-o' => PreflopHand.kingNineO,
    'king-eight-o' => PreflopHand.kingEightO,
    'king-seven-o' => PreflopHand.kingSevenO,
    'king-six-o' => PreflopHand.kingSixO,
    'king-five-o' => PreflopHand.kingFiveO,
    'king-four-o' => PreflopHand.kingFourO,
    'king-three-o' => PreflopHand.kingThreeO,
    'king-two-o' => PreflopHand.kingTwoO,
    'queen-jack-o' => PreflopHand.queenJackO,
    'queen-ten-o' => PreflopHand.queenTenO,
    'queen-nine-o' => PreflopHand.queenNineO,
    'queen-eight-o' => PreflopHand.queenEightO,
    'queen-seven-o' => PreflopHand.queenSevenO,
    'queen-six-o' => PreflopHand.queenSixO,
    'queen-five-o' => PreflopHand.queenFiveO,
    'queen-four-o' => PreflopHand.queenFourO,
    'queen-three-o' => PreflopHand.queenThreeO,
    'queen-two-o' => PreflopHand.queenTwoO,
    'jack-ten-o' => PreflopHand.jackTenO,
    'jack-nine-o' => PreflopHand.jackNineO,
    'jack-eight-o' => PreflopHand.jackEightO,
    'jack-seven-o' => PreflopHand.jackSevenO,
    'jack-six-o' => PreflopHand.jackSixO,
    'jack-five-o' => PreflopHand.jackFiveO,
    'jack-four-o' => PreflopHand.jackFourO,
    'jack-three-o' => PreflopHand.jackThreeO,
    'jack-two-o' => PreflopHand.jackTwoO,
    'ten-nine-o' => PreflopHand.tenNineO,
    'ten-eight-o' => PreflopHand.tenEightO,
    'ten-seven-o' => PreflopHand.tenSevenO,
    'ten-six-o' => PreflopHand.tenSixO,
    'ten-five-o' => PreflopHand.tenFiveO,
    'ten-four-o' => PreflopHand.tenFourO,
    'ten-three-o' => PreflopHand.tenThreeO,
    'ten-two-o' => PreflopHand.tenTwoO,
    'nine-eight-o' => PreflopHand.nineEightO,
    'nine-seven-o' => PreflopHand.nineSevenO,
    'nine-six-o' => PreflopHand.nineSixO,
    'nine-five-o' => PreflopHand.nineFiveO,
    'nine-four-o' => PreflopHand.nineFourO,
    'nine-three-o' => PreflopHand.nineThreeO,
    'nine-two-o' => PreflopHand.nineTwoO,
    'eight-seven-o' => PreflopHand.eightSevenO,
    'eight-six-o' => PreflopHand.eightSixO,
    'eight-five-o' => PreflopHand.eightFiveO,
    'eight-four-o' => PreflopHand.eightFourO,
    'eight-three-o' => PreflopHand.eightThreeO,
    'eight-two-o' => PreflopHand.eightTwoO,
    'seven-six-o' => PreflopHand.sevenSixO,
    'seven-five-o' => PreflopHand.sevenFiveO,
    'seven-four-o' => PreflopHand.sevenFourO,
    'seven-three-o' => PreflopHand.sevenThreeO,
    'seven-two-o' => PreflopHand.sevenTwoO,
    'six-five-o' => PreflopHand.sixFiveO,
    'six-four-o' => PreflopHand.sixFourO,
    'six-three-o' => PreflopHand.sixThreeO,
    'six-two-o' => PreflopHand.sixTwoO,
    'five-four-o' => PreflopHand.fiveFourO,
    'five-three-o' => PreflopHand.fiveThreeO,
    'five-two-o' => PreflopHand.fiveTwoO,
    'four-three-o' => PreflopHand.fourThreeO,
    'four-two-o' => PreflopHand.fourTwoO,
    'three-two-o' => PreflopHand.threeTwoO,
    _ => throw ArgumentError('Invalid preflop hand: $value'),
  };
}
